@page "/authors"
@using Acme.BookStore.Authors
@using Acme.Bookstore.Localization
@using Acme.Bookstore.Permissions
@using Volo.Abp.AspNetCore.Components.Web
@using Volo.Abp.Application.Dtos
@using Volo.Abp.Authorization.Permissions
@inherits BookstoreComponentBase
@inject IAuthorAppService AuthorAppService
@inject AbpBlazorMessageLocalizerHelper<BookstoreResource> LH
@inject IPermissionChecker PermissionChecker

<Card>
    <CardHeader>
        <Row Class="justify-content-between">
            <Column ColumnSize="ColumnSize.IsAuto">
                <h2>@L["Authors"]</h2>
            </Column>
            <Column ColumnSize="ColumnSize.IsAuto">
                @if (CanCreateAuthor)
                {
                    <Button Color="Color.Primary" Clicked="OpenCreateAuthorModal">
                        @L["NewAuthor"]
                    </Button>
                }
            </Column>
        </Row>
    </CardHeader>
    <CardBody>
        <DataGrid TItem="AuthorDto" Data="AuthorList" ReadData="OnDataGridReadAsync" TotalItems="TotalCount"
        ShowPager="true" PageSize="PageSize">
            <DataGridColumns>
                <DataGridColumn Width="150px" TItem="AuthorDto" Field="@nameof(AuthorDto.Id)" Sortable="false"
                Caption="@L["Actions"]">
                    <DisplayTemplate>
                        <Dropdown>
                            <DropdownToggle Color="Color.Primary">
                                @L["Actions"]
                            </DropdownToggle>
                            <DropdownMenu>
                                @if (CanEditAuthor)
                                {
                                    <DropdownItem Clicked="() => OpenEditAuthorModal(context)">
                                        @L["Edit"]
                                    </DropdownItem>
                                }
                                @if (CanDeleteAuthor)
                                {
                                    <DropdownItem Clicked="() => DeleteAuthorAsync(context)">
                                        @L["Delete"]
                                    </DropdownItem>
                                }
                            </DropdownMenu>
                        </Dropdown>
                    </DisplayTemplate>
                </DataGridColumn>
                <DataGridColumn TItem="AuthorDto" Field="@nameof(AuthorDto.Name)" Caption="@L["Name"]"></DataGridColumn>
                <DataGridColumn TItem="AuthorDto" Field="@nameof(AuthorDto.BirthDate)" Caption="@L["BirthDate"]">
                    <DisplayTemplate>
                        @context.BirthDate.ToShortDateString()
                    </DisplayTemplate>
                </DataGridColumn>
            </DataGridColumns>
        </DataGrid>
    </CardBody>
</Card>

@code {
    private IReadOnlyList<AuthorDto> AuthorList { get; set; }
    private int PageSize { get; } = LimitedResultRequestDto.DefaultMaxResultCount;
    private int CurrentPage { get; set; }
    private string CurrentSorting { get; set; }
    private int TotalCount { get; set; }
    private bool CanCreateAuthor { get; set; }
    private bool CanEditAuthor { get; set; }
    private bool CanDeleteAuthor { get; set; }
    private CreateAuthorDto NewAuthor { get; set; } = new CreateAuthorDto();
    private Guid EditingAuthorId { get; set; }
    private UpdateAuthorDto EditingAuthor { get; set; } = new UpdateAuthorDto();
    private Modal CreateAuthorModal { get; set; }
    private Modal EditAuthorModal { get; set; }
    private Validations CreateValidationsRef;
    private Validations EditValidationsRef;

    protected override async Task OnInitializedAsync()
    {
        await SetPermissionsAsync();
        await GetAuthorsAsync();
    }

    private async Task SetPermissionsAsync()
    {
        CanCreateAuthor = await PermissionChecker.IsGrantedAsync(BookstorePermissions.Authors.Create);
        CanEditAuthor = await PermissionChecker.IsGrantedAsync(BookstorePermissions.Authors.Edit);
        CanDeleteAuthor = await PermissionChecker.IsGrantedAsync(BookstorePermissions.Authors.Delete);
    }

    private async Task GetAuthorsAsync()
    {
        var result = await AuthorAppService.GetListAsync(new GetAuthorListDto
            {
                MaxResultCount = PageSize,
                SkipCount = CurrentPage * PageSize,
                Sorting = CurrentSorting
            });

        AuthorList = result.Items;
        TotalCount = (int)result.TotalCount;
    }

    private async Task OnDataGridReadAsync(DataGridReadDataEventArgs<AuthorDto> e)
    {
        CurrentSorting = e.Columns
            .Where(c => c.SortDirection != SortDirection.Default)
            .Select(c => c.Field + (c.SortDirection == SortDirection.Descending ? " DESC" : ""))
            .JoinAsString(",");
        CurrentPage = e.Page - 1;

        await GetAuthorsAsync();
        await InvokeAsync(StateHasChanged);
    }

    private void OpenCreateAuthorModal()
    {
        CreateValidationsRef.ClearAll();
        NewAuthor = new CreateAuthorDto();
        CreateAuthorModal.Show();
    }

    private void CloseCreateAuthorModal() => CreateAuthorModal.Hide();
    private void OpenEditAuthorModal(AuthorDto author)
    {
        EditValidationsRef.ClearAll();
        EditingAuthorId = author.Id;
        EditingAuthor = ObjectMapper.Map<AuthorDto, UpdateAuthorDto>(author);
        EditAuthorModal.Show();
    }

    private async Task DeleteAuthorAsync(AuthorDto author)
    {
        var confirmMessage = L["AuthorDeletionConfirmationMessage", author.Name];
        if (!await Message.Confirm(confirmMessage)) return;

        await AuthorAppService.DeleteAsync(author.Id);
        await GetAuthorsAsync();
    }

    private void CloseEditAuthorModal() => EditAuthorModal.Hide();
    private async Task CreateAuthorAsync()
    {
        if (await CreateValidationsRef.ValidateAll())
        {
            await AuthorAppService.CreateAsync(NewAuthor);
            await GetAuthorsAsync();
            CreateAuthorModal.Hide();
        }
    }

    private async Task UpdateAuthorAsync()
    {
        if (await EditValidationsRef.ValidateAll())
        {
            await AuthorAppService.UpdateAsync(EditingAuthorId, EditingAuthor);
            await GetAuthorsAsync();
            EditAuthorModal.Hide();
        }
    }
}